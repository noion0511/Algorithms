# OPP(Object-Oriented Programming)이란 무엇인가

  - OOP (Object-Oriented Programming)이란 객체 지향적인 프로그래밍이다. 
  - OOP는 객체를 기준으로 코드를 나누어 구현한다.
  - C언어는 절차 지향 프로그래밍인데, 절차 지향 프로그래밍은 프로세스가 함수 단위로 순서대로 진행되는 것을 말한다.
  - OOP는 절차지향에 비해서 사람의 사고방식과 더 가깝다.
  - OOP는 객체들의 유기적인 관계를 통해서 프로세스가 진행된다.
  - 애플리케이션을 구성하는 요소들을 객체로 바라보고, 객체들을 유기적으로 연결하여 프로그래밍 하는 것을 말한다.
 
 # OPP(Object-Oriented Programming)의 특징
 ### 캡슐화(Encapsulation)
  - 하나의 객체에 대해 그 객체가 특정한 목적을 위한 필요한 변수나 메소드를 하나로 묶는 것을 의미한다.
  - 클래스에서 만들어진 객체가 특정한 목적을 잘 수행할 수 있도록 사용해야할 변수와 그 변수를 가지고 특정한 액션 즉 메서드를 관련성 있게 클래스에 구성해야한다.
  
 ### 추상화(Abstraction)
  - 목적과 관련이 없는 부분을 제거하여 필요한 부분만을 표현하기 위한 개념이다.
  - 객체들의 공통된 특징을 파악해 정의해 놓은 설계 기법이라고 할 수 있다. 
  
  Ex) 벤츠, 아우디, 티코 등등 우리가 생각하는 여러 종류의 자동차가 있다. 이것을 다 클래스화하고 변수와 메서드 등을 개별적으로 만드는 것은 무모한 짓이다.
  따라서 방금 나열한 자동차들의 공통적인 요소나 특징을 추출하는 과정인 추상화를 거쳐 요소를 끄집어 내면 바퀴, 핸들, 차문, 유리창 등 필수적인 부품이 있다.
  바퀴는 굴러가고, 핸들은 돌아가고 차문은 열려야한다 공통적인 행동 즉 어떤 차든 필수적으로 필요한 메서드가 추출된다. 이러한 과정이 추상화이다.
  
 ### 다형성(Polymorphism)
  - 다형성은 상속을 통해 기능을 확장하거나 변경하는 것을 가능하게 해준다.
  - 이를 통해 코드의 재사용, 코드 길이 감소가 되어 유지보수가 용이하도록 도와준다.
  Ex) public class OverloadingTest{
  
    public void test(){
      System.out.println("사용자 없음");
    }
    
    public void test(String name){
      System.out.println("사용자 이름 = " +name);
    }
  
   public void test(String name, int money){
      System.out.println("사용자 이름 = "+name+" , 사용료 = "+money);
    }
  }
  
  
