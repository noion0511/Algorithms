# OPP(Object-Oriented Programming)이란 무엇인가

  - OOP (Object-Oriented Programming)이란 객체 지향적인 프로그래밍이다. 
  - OOP는 객체를 기준으로 코드를 나누어 구현한다.
  - C언어는 절차 지향 프로그래밍인데, 절차 지향 프로그래밍은 프로세스가 함수 단위로 순서대로 진행되는 것을 말한다.
  - OOP는 절차지향에 비해서 사람의 사고방식과 더 가깝다.
  - OOP는 객체들의 유기적인 관계를 통해서 프로세스가 진행된다.
  - 애플리케이션을 구성하는 요소들을 객체로 바라보고, 객체들을 유기적으로 연결하여 프로그래밍 하는 것을 말한다.
 
 # OPP(Object-Oriented Programming)의 특징
 ### 캡슐화(Encapsulation)
  - 하나의 객체에 대해 그 객체가 특정한 목적을 위한 필요한 변수나 메소드를 하나로 묶는 것을 의미한다.
  - 클래스에서 만들어진 객체가 특정한 목적을 잘 수행할 수 있도록 사용해야할 변수와 그 변수를 가지고 특정한 액션 즉 메서드를 관련성 있게 클래스에 구성해야한다.
  
 ### 추상화(Abstraction)
  - 목적과 관련이 없는 부분을 제거하여 필요한 부분만을 표현하기 위한 개념이다.
  - 객체들의 공통된 특징을 파악해 정의해 놓은 설계 기법이라고 할 수 있다. 
  
  Ex) 벤츠, 아우디, 티코 등등 우리가 생각하는 여러 종류의 자동차가 있다. 이것을 다 클래스화하고 변수와 메서드 등을 개별적으로 만드는 것은 무모한 짓이다.
  따라서 방금 나열한 자동차들의 공통적인 요소나 특징을 추출하는 과정인 추상화를 거쳐 요소를 끄집어 내면 바퀴, 핸들, 차문, 유리창 등 필수적인 부품이 있다.
  바퀴는 굴러가고, 핸들은 돌아가고 차문은 열려야한다 공통적인 행동 즉 어떤 차든 필수적으로 필요한 메서드가 추출된다. 이러한 과정이 추상화이다.
  
 ### 다형성(Polymorphism)
  - 다형성은 상속을 통해 기능을 확장하거나 변경하는 것을 가능하게 해준다.
  - 이를 통해 코드의 재사용, 코드 길이 감소가 되어 유지보수가 용이하도록 도와준다.
  
  다형성의 장점?
  -> 같은 이름의 속성을 유지함으로서, 속성을 사용하기 위한 인터페이스를 유지하고, 메서드 이름을 낭비하지 않는다는 것이다.
     예를 들어, 고양이와 사자의 울음소리를 호출하기 위해서 각 객체에서 roar() 메서드를 호출하면 된다.
     roraCat(), roarLion()으로 각각을 정의할 필요가 없다는 것이다. API가 많아질수록 복잡성은 증가하기 때문에 다형성은 유용하다.
  
  Ex) public class OverloadingTest{ //overloading
  
    public void test(){
      System.out.println("사용자 없음");
    }
    
    public void test(String name){
      System.out.println("사용자 이름 = " +name);
    }
  
   public void test(String name, int money){
      System.out.println("사용자 이름 = "+name+" , 사용료 = "+money);
    }
  }
 
 오버로딩과 오버라이딩?
 -> 오버라이딩
  - 부모 클래스에서 상속받은 자식 클래스에서 부모클래스에서 만들어진 메서드를 자식 클래스에서 자신의 입맛대로 다시 재정의해서 사용하는 것을 말한다.
 -> 오버로딩
  - 같은 이름의 메서드를 사용하지만 메서드마다 다른 용도로 사용되며 그 결과물도 다르게 구현할 수 있게 만드는 개념이다.
  - 오버로딩이 가능하려면 메서드끼리 이름은 같지만 매개변수의 갯수나 데이터 타입이 다르면 오버로딩이 적용된다. 메서드 이름이 같아도 에러가 생기지않는다.

  Ex) public class Employee{ //overridding

    public String name;
    public int age;

    public void print(){
      System.out.println("사원의 이름 = "+this.name+", 나이 = "+this.age);
    }
  }

  //Emplyee 상속
  public class Manager extends Employee{

    String jobOfManage;

    //overriding  Employee의 pirnt() 메소드 오버라이딩
    public void print(){
      System.out.println("사원의 이름 = "+this.name+", 나이 = "+this.age);
      System.out.println("관리자 "+this.name+"은 "+this.jobOfManage+" 담당입니다.");
    }
  }

 ### 상속성, 재사용(Inheritance)
 - 상속이란 기존 상위클래스에 근거하여 새롭게 클래스와 행위를 정의할 수 있게 도와주는 개념이다.
 - 기존 클래스에 기능을 가져와 재사용할 수 있으면서도 동시에 새롭게 만든 클래스에 새로운 기능을 추가할 수 있게 만들어 준다.
 
 상속이 필요한 이유?
  -> 상속이 필요한 이유는 코드의 중복을 없애기 위함이다. 상속 관계를 맺으면 자식 객체를 생성할 때 부모 클래스의 속성들을 자동으로 물려 받는다. 
     따라서 자식 클래스에서 또 정의할 필요가 없다. 이것이 상속이 필요한 이유이다.
  
  
